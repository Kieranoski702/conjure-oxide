var searchIndex = JSON.parse('{\
"conjure_oxide":{"doc":"","t":"ANNNDENENNNDEENNNNLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["ast","BoolDomain","Bounded","ConstantInt","DecisionVariable","Domain","Eq","Expression","Geq","IntDomain","MachineName","Model","Name","Range","Reference","Single","Sum","UserName","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constraints","domain","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_domain","variables"],"q":[[0,"conjure_oxide"],[1,"conjure_oxide::ast"],[89,"core::clone"],[90,"core::cmp"],[91,"core::fmt"],[92,"core::fmt"],[93,"core::result"],[94,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,2,3,5,0,0,5,0,5,2,1,0,0,0,5,3,5,1,10,1,8,2,3,5,10,1,8,2,3,5,1,2,3,5,1,2,3,5,10,8,1,8,2,3,5,1,10,1,8,2,3,5,10,1,8,2,3,5,1,10,1,8,2,3,5,1,2,3,5,10,1,8,2,3,5,10,1,8,2,3,5,10,1,8,2,3,5,10,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,[[1,1],7],[[8,8],7],[[2,2],7],[[[3,[-1]],[3,[-1]]],7,9],[[5,5],7],[[-1,-2],7,[],[]],[[10,11],12],[[1,11],12],[[8,11],12],[[2,11],12],[[[3,[-1]],11],12,13],[[5,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,-1],6,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[10,1,2],6],0],"c":[],"p":[[4,"Name",1],[4,"Domain",1],[4,"Range",1],[8,"Clone",89],[4,"Expression",1],[15,"tuple"],[15,"bool"],[3,"DecisionVariable",1],[8,"PartialEq",90],[3,"Model",1],[3,"Formatter",91],[6,"Result",91],[8,"Debug",91],[8,"Hasher",92],[4,"Result",93],[3,"TypeId",94]]},\
"minion_rs":{"doc":"This crate provides low level Rust bindings to the Minion …","t":"GAAFNNNENENNNDNNNNDEEGLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLENENNLLLLLLLLLLLLLLLLLLLLLLL","n":["Callback","ast","error","run_minion","Bool","Bool","Bound","Constant","ConstantAsVar","Constraint","Discrete","Ineq","Integer","Model","NameRef","SparseBound","SumGeq","SumLeq","SymbolTable","Var","VarDomain","VarName","add_var","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","contains","eq","equivalent","fmt","from","from","from","from","from","from","get_variable_order","get_vartype","into","into","into","into","into","into","named_variables","new","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Error","InvalidInstance","RuntimeError","RuntimeError","UnknownError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"minion_rs"],[4,"minion_rs::ast"],[77,"minion_rs::error"],[105,"core::result"],[106,"core::option"],[107,"core::fmt"],[108,"core::fmt"],[109,"core::any"],[110,"core::error"],[111,"alloc::string"]],"d":["Callback function used to capture results from minion as …","The Model Syntax tree for the Minion bindings.","Error types for Minion bindings.","Run Minion on the given Model.","","","","","","","","","","","","","","","","A variable can either be a named variable, or an anomynous …","","","Creates a new variable and adds it to the symbol table. If …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A lookup table of all named variables.","","","","","","","","","","","","","","","","","","","","","A wrapper over all errors thrown by <code>minion_rs</code>.","The model given to Minion is invalid.","RuntimeErrors are thrown by Minion during execution.","","An unknown error has occurred.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,11,8,8,0,20,0,8,21,11,0,20,8,21,21,0,0,0,0,6,1,21,20,6,11,8,1,21,20,6,11,8,8,8,1,6,11,11,11,1,21,20,6,11,8,6,6,1,21,20,6,11,8,1,1,8,1,21,20,6,11,8,1,21,20,6,11,8,1,21,20,6,11,8,0,4,0,16,4,16,4,16,4,16,16,4,4,16,16,4,4,16,4,16,16,4,16,4,16,4,16,4],"f":[0,0,0,[[1,2],[[5,[3,4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[6,7,8],[[9,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[[-1,-2],3,[],[]],0,[[6,7],10],[[11,11],10],[[-1,-2],10,[],[]],[[11,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,[[14,[7]]]],[[6,7],[[9,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],1],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,12],13],[[16,12],13],[[4,12],13],[[4,12],13],[-1,-1,[]],[4,16],[-1,-1,[]],[17,4],[-1,-2,[],[]],[-1,-2,[],[]],[16,[[9,[18]]]],[-1,19,[]],[-1,19,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[3,"Model",4],[6,"Callback",0],[15,"tuple"],[4,"RuntimeError",77],[4,"Result",105],[3,"SymbolTable",4],[6,"VarName",4],[4,"VarDomain",4],[4,"Option",106],[15,"bool"],[4,"Constant",4],[3,"Formatter",107],[6,"Result",107],[3,"Vec",108],[3,"TypeId",109],[4,"Error",77],[15,"u32"],[8,"Error",110],[3,"String",111],[4,"Var",4],[4,"Constraint",4]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
